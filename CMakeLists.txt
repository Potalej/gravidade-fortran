# ============================================================================
# Arquivo CMake para o Gravidade-Fortran
#
# Na raiz do diretorio, utilize:
#   > cmake -B build
# Para compilar com o Ninja, use:
#   > cmake -B build -G Ninja
# ============================================================================

cmake_minimum_required(VERSION 3.7)
project("gravidade" VERSION 0.7.2
        DESCRIPTION "Simulacoes de gravidade em Fortran!"
        LANGUAGES Fortran)
enable_language(Fortran)

# Data e hora de compilacao
string(TIMESTAMP BUILD_DATE "%Y-%m-%d")
string(TIMESTAMP BUILD_TIME "%H:%M:%S")

# ============================================================================
# Compilacao
# ----------------------------------------------------------------------------
set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -O3 -march=native -fopenmp")
# set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -g -fcheck=all -Wall -fbacktrace -O3 -march=native -fopenmp") # Debug
message("\n******************************************")
message("#        gravidade-fortran v${CMAKE_PROJECT_VERSION}        #")
message("******************************************")

# Diretorio para .mod
include_directories(${CMAKE_BINARY_DIR}/mod)
# ============================================================================

# ============================================================================
# GProf
# ----------------------------------------------------------------------------
option(GPROF "Habilitar criacao de perfil gprof" OFF)

if (GPROF)
  message(STATUS "GNU Profiler (gprof) ativado")
  add_compile_options(-pg)
  add_link_options(-pg)
endif()
# ============================================================================

# ============================================================================
# GPU
# ----------------------------------------------------------------------------
option(USAR_GPU "Utilizar GPU (OpenMP offload)" OFF)

if (USAR_GPU)
  message(STATUS "Compilando para comportar GPU.")
  set(USAR_GPU_BOOL ".TRUE.")
  add_compile_options(-foffload=nvptx-none)
  add_compile_definitions(USAR_GPU)
else()
  set(USAR_GPU_BOOL ".FALSE.")
endif()
# ============================================================================

# ============================================================================
# Precisao
# ----------------------------------------------------------------------------
set(PRECISAO "64" CACHE STRING "Escolha a precisão: 32, 64 ou 128")
set_property(CACHE PRECISAO PROPERTY STRINGS 32 64 128)

# Define flags de pre-processador conforme a precisão
if(PRECISAO STREQUAL "32")
  add_compile_definitions(REAL32)
elseif(PRECISAO STREQUAL "64")
  add_compile_definitions(REAL64)
elseif(PRECISAO STREQUAL "128")
  add_compile_definitions(REAL128)
else()
  message(FATAL_ERROR "Precisão inválida: ${PRECISAO}. Use 32, 64 ou 128")
endif()
# ============================================================================

# ============================================================================
# Versionamento
# ----------------------------------------------------------------------------
configure_file(
  ${CMAKE_CURRENT_SOURCE_DIR}/version.f90.in
  ${CMAKE_CURRENT_BINARY_DIR}/version.f90
  @ONLY
)
add_library(versao
  ${CMAKE_CURRENT_BINARY_DIR}/version.f90
)
# ============================================================================

# ============================================================================
# Executaveis utilizados no programa
# ----------------------------------------------------------------------------
add_executable(gravidade
  "main.f90"
)
target_link_libraries(versao)
target_include_directories(gravidade PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
# ============================================================================

# ============================================================================
# Procura pelo OpenBLAS
# ----------------------------------------------------------------------------
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
find_package(OpenBLAS REQUIRED)

IF (NOT OpenBLAS_LIB)
  message(FATAL_ERROR "OpenBLAS nao encontrado!!!")
ENDIF()
# ============================================================================

# ============================================================================
# Inclui o JSONFortran
# ----------------------------------------------------------------------------
add_subdirectory(lib/json-fortran)
# ============================================================================



# ============================================================================
# =-=-=-=-=-=-=-=-=-=-=-=-=-=- Bibliotecas locais =-=-=-=-=-=-=-=-=-=-=-=-=-=-
# ============================================================================

# ============================================================================
#> Tipos
# ----------------------------------------------------------------------------
# Esta biblioteca contem os tipos de variaveis reais utilizadas globalmente,
# incluindo o "pf". Eh chamada por todas as bibliotecas e modulos.
# ----------------------------------------------------------------------------
add_library(tipos
"./src/tipos.F90"
)
# ============================================================================

# ============================================================================
#> json_utils_mod
# ----------------------------------------------------------------------------
# Esta biblioteca contem funcionalidades basicas do Json-Fortran e rotinas
# para facilitar o uso local de variaveis de tipo JSON_VALUE.
# ----------------------------------------------------------------------------
add_library(json_utils_mod 
  "./src/libs/json_utils_mod.f90"
)
target_link_libraries(json_utils_mod PRIVATE tipos)
target_link_libraries(json_utils_mod PRIVATE jsonfortran)
# ============================================================================

# ============================================================================
#> Conexao
# ----------------------------------------------------------------------------
# Esta biblioteca eh utilizada para fazer a transmissao de dados via socket
# quando se deseja visualizar simulacoes em tempo real. Eh chamada pelo
# modulo SIMULACAO principal.
#
# Como ela depende do sistema operacional utilizado, eh necessario fazer
# a verificacao devida.
# ----------------------------------------------------------------------------
IF (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  add_library(conexao_mod STATIC
    "./src/socket/linux/conexao.f90"
    "./src/socket/linux/server_mod.f90"
  )
# ----------------------------------------------------------------------------
# No caso do Windows, eh preciso adicionar as rotinas do WSA para que o
# socket funcione corretamente
# ----------------------------------------------------------------------------
ELSEIF (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
  add_library(conexao_mod STATIC
    "./src/socket/windows/conexao.f90"
    "./src/socket/windows/server_mod.f90"
    "./src/socket/windows/wsa_mod.f90"
  )
  target_link_libraries(conexao_mod PRIVATE ws2_32)
ENDIF()
target_link_libraries(conexao_mod PRIVATE tipos)
# ============================================================================

# ============================================================================
#> Aleatorio
# ----------------------------------------------------------------------------
# Contem rotinas de geracao de valores aleatorios. Eh chamada pelo modulo
# de condicionamento.
# ----------------------------------------------------------------------------
add_library(aleatorio 
  "./src/libs/aleatorio.f90" 
)
target_link_libraries(aleatorio PRIVATE tipos)
# ============================================================================

# ============================================================================
#> Octree
# ----------------------------------------------------------------------------
# Esta biblioteca implementa a separacao de vetores 3D em uma octree (arvore
# "octanaria"). No momento, a arvore eh utilizada somente pelo modulo de
# colisoes, quando desejado.
# ----------------------------------------------------------------------------
add_library(octree 
  "./src/libs/octree.f90"
)
target_link_libraries(octree PRIVATE tipos)
# ============================================================================

# ============================================================================
#> Utilidades
# ----------------------------------------------------------------------------
# Esta contem rotinas e funcoes dos antigos modulos MECANICA e AUXILIARES,
# ou seja, contem tanto rotinas para resolucao de sistemas lineares, calculo
# de autovalores e afins, como tambem rotinas para calculo de energia total,
# momento angular, tensor de inercia e afins.
# ----------------------------------------------------------------------------
add_library(utilidades
  "./src/libs/utilidades.f90" 
)
target_link_libraries(utilidades PRIVATE tipos)
# ============================================================================



# ============================================================================
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Modulos =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# ============================================================================

# ============================================================================
#> Arquivos
# ----------------------------------------------------------------------------
# Este modulo contem as funcionalidades de arquivos .txt, .csv e .json que
# sao utilizados pelo programa.
# ----------------------------------------------------------------------------
add_library(arquivos
  # Principal (reune os dois)
  "./src/arquivo/arquivos_mod.f90"

  # Arquivos gerais
  "./src/arquivo/arquivos.f90"
  "./src/arquivo/diretorio.f90"
  "./src/arquivo/string_utils.f90"

  # Arquivos JSON
  "./src/arquivo/arquivos_json.f90"
)
target_link_libraries(arquivos PRIVATE 
  tipos
  json_utils_mod 
)
# ============================================================================

# ============================================================================
#> Corretor
# ----------------------------------------------------------------------------
# Contem rotinas para, dado um estado no espaco de fases e as integrais que
# deveriam estar sendo satisfeitas, aplicar uma projecao do estado para obter
# um estado que atenda - aproximadamente - tais integrais. Eh utilizado apos
# integracoes numericas, permitindo melhorar os resultados.
# Depende da biblioteca "utilidades"
# ----------------------------------------------------------------------------
add_library(corretor
  "./src/calcs/correcao.f90" 
)
target_link_libraries(corretor PRIVATE
  ${OpenBLAS_LIB} # utilizada no corretor
  utilidades
  tipos
)

# ============================================================================
#> Colisoes
# ----------------------------------------------------------------------------
# Contem rotinas para aplicar choques perfeitamente elasticos entre dois
# corpos. Contem um verificador direto de colisoes, mas tambem importa a
# biblioteca "OCTREE" e permite utilizar a arvore para verificar colisoes.
# ----------------------------------------------------------------------------
add_library(colisoes
  "./src/calcs/colisao.f90" 
)
target_link_libraries(colisoes PRIVATE
  tipos
  octree
)
# ============================================================================

# ============================================================================
#> Condicionamento
# ----------------------------------------------------------------------------
## Contem rotinas para condicionar valores iniciais para que atendam a 
## restricoes desejadas, como integrais primeiras ou equilibrio (virial).
## Depende das bibliotecas "ALEATORIO", "JSON_UTILS" e "UTILIDADES".
# ----------------------------------------------------------------------------
add_library(condicionamento
  "./src/calcs/condicionamento/condicoes_iniciais.f90"  
  "./src/calcs/condicionamento/condicionamento.f90"  
)
target_link_libraries(condicionamento PRIVATE
  utilidades
  ${OpenBLAS_LIB}
  aleatorio
  tipos
  json_utils_mod
)
# ============================================================================

# ============================================================================
#> Integracao
# ----------------------------------------------------------------------------
# Modulo que centraliza a integracao. Todos os metodos de integracao numerica
# sao adicionados em
#
# "src/calcs/integracao/CMakeLists.txt"
#
# e sao chamados aqui, com as funcoes de forca e dos modulos centralizadores.
# ----------------------------------------------------------------------------
add_subdirectory(src/calcs/integracao) # Metodos de integracao
add_library(integracao 
  "./src/calcs/forcas/forcas.F90" 
  "./src/calcs/forcas/forcas_md.F90" 
  "./src/calcs/forcas/forcas_mi.F90"
  
  "./src/calcs/integracao/integrador.f90" 
  ${CMAKE_CURRENT_BINARY_DIR}/src/calcs/integracao/integradores.f90

  ${INTEGRADORES_SOURCE}
)
target_link_libraries(integracao PRIVATE
  tipos
  json_utils_mod
)
# ============================================================================

# ============================================================================
# Procura pelo Python
# ----------------------------------------------------------------------------
# A exibicao dos graficos eh feita com o matplotlib, entao o Python precisa
# estar instalado. Se nao estiver, um aviso sera enviado mas a biblioteca sera
# adicionada de qualquer jeito, entao caso o Python e o matplotlib sejam
# instalados posteriormente, o programa funcionara.
# ----------------------------------------------------------------------------
add_library(pyplot "./src/libs/pyplot.f90")
target_link_libraries(pyplot PRIVATE 
  tipos
  arquivos
)
find_program(PYTHON NAMES python python3 QUIET)
IF(PYTHON)
  find_package(Python COMPONENTS Interpreter REQUIRED QUIET)

  # procura pelo matplotlib
  execute_process(
    COMMAND pip show matplotlib
    RESULT_VARIABLE EXIT_CODE
    OUTPUT_QUIET
  )

  # Se nao achar, so da o WARNING
  IF(NOT EXIT_CODE EQUAL 0)
    IF(NOT EXIT_MATPLOTLIB EQUAL 0)
      message(WARNING "A dependencia 'matplotlib' nao foi encontrada. Nao sera possivel criar graficos.")
    ENDIF()
  ENDIF()

  message(STATUS "Python localizado.")
ELSE()
  message(WARNING "Python nao encontrado! Nao sera possivel criar graficos.")
ENDIF()
# ============================================================================

# ============================================================================
# Modulos para simulacao
# ----------------------------------------------------------------------------
# O modulo de simulacao centraliza todo o sistema e eh efetivamente o que faz
# o programa funcionar, depois do MAIN.
# 
# O modulo simulacao_sorteio contem as rotinas para sortear e salvar os dados,
# alem de simular se for desejado.
#
# O modulo simulacao_vi contem as rotinas para ler e rodar simulacoes com
# valores predefinidos em algum arquivo de valores iniciais.
# 
# Os outros dois modulos sao chamados por esses primeiros, unindo os processos
# de integracao numerica, colisoes, correcao, arquivos etc.
# ----------------------------------------------------------------------------
add_library(simulacao 
  "./src/calcs/simulacao/simulacao_sorteio.f90"
  "./src/calcs/simulacao/simulacao_vi.f90"
  "./src/calcs/simulacao/simulacao.f90"
  "./src/calcs/simulacao/simulador.f90"
)
target_link_libraries(simulacao PRIVATE
  tipos
  versao
  arquivos
  integracao
  conexao_mod
  utilidades
  condicionamento
  colisoes
  corretor
)
# ============================================================================

# ============================================================================
# Linka as bibliotecas no executavel
# ----------------------------------------------------------------------------
target_link_libraries(gravidade
  tipos
  pyplot
  simulacao
  integracao
)
# ============================================================================

# ============================================================================
# Apos a compilacao faz uma copia do executavel para fora da pasta build
# ----------------------------------------------------------------------------
add_custom_command(TARGET gravidade POST_BUILD 
  COMMAND "${CMAKE_COMMAND}" -E copy 
     "$<TARGET_FILE:gravidade>"
     "../$<CONFIGURATION>/$<TARGET_FILE_NAME:gravidade>" 
  COMMENT "Copiando para o lado de fora")
# ----------------------------------------------------------------------------
